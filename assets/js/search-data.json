{
  
    
        "post0": {
            "title": "Relationships between elementary modeling building blocks",
            "content": "I think that the hardest thing in starting the journey in data science is actually to answer the question: where to start? The majority of people are concerned with mathematics - how much I actually need it? What kind of math? How deep I should go? Almost all resources agree that you should know some stats, linear algebra, calculus, optimization and usually they throw at you a few books because reading books doesn&#39;t hurt right? I think that they could actually hurt because if you dedicate too much mental energy and time understanding the books you don&#39;t have time to focus on things that actually drive your value as a data scientist - coding, data wrangling skills, familiarity with basic tech (git, SQL, docker...). 5 hours practicing pandas could have an incredible impact on the value you can bring as a data scientist, 5 hours spending on determinants have on the other hand doubtful value at this stage. But is the recommendation really never look at math because you don&#39;t need it? . Not at all, but we should take into account something that economist call the law of diminishing returns (https://en.wikipedia.org/wiki/Diminishing_returns). Simply put, any additional hour you put into learning some particular skill will be worth less and less - just because you already picked all low hanging fruit. Take for example the pandas data wrangling skills, if you spend 1 additional hour with it after a couple of years you are using it, you will not change the way how you use it, and probably not discover anything new because you already mastered most of it. How is it related to learning math for data science? In the beginning, it has just quite a bad ratio in cost-benefit analyses, but over time you learn pandas, sklearn, sql... and the math will again be in a better position to pick up the book about Linear Algebra. This would unfortunately mean that you maybe don&#39;t touch any math in the first few months at all. This philosophy of hands-on first experience starts to be popular with projects such as fastai which helps you to build state-of-the-art DL models with a reasonable level of understanding without any math. . Although I like the approach, in general, I think that it would be nice to have at least a little bit of math which could have a better cost/benefit ratio at the beginning so it would be worth learning it already as a beginner. This is my attempt to provide the &quot;math&quot; basics with a good cost/benefit ratio which was useful for my data science practice and I would like to have it when I started. . Everything that follows is the basic stats with the basics of linear models. If you understand deep enough the relationships between these two, your intuition about linear models and data analyses will grow rapidly and help you to discover flaws in your analyses/modeling more quickly. It can also help to guide modeling and interpretation. . Simple statistics . I would recommend simply memorize the following few basic statiscs . $$ bar{x}= frac{1}{n} sum_{i=1}^{n} x_{i} $$ Sample varience . $$ s_{y}^{2}= frac{1}{n-1} sum_{i=1}^{n} left(y_{i}- overline{y} right)^{2} $$ Sample standard deviation . $$ s_{y}={ sqrt{ frac{1}{n-1} sum_{i=1}^{n} left(y_{i}- overline{y} right)^{2}}} $$ Sample covarience . $$ s_{x y}= frac{1}{n-1} sum_{i=1}^{n} left(x_{i}- overline{x} right) left(y_{i}- overline{y} right) $$ Pearson correlation coeficient . $$ r_{x y}= frac{s_{x y}}{s_{x} s_{y}} $$ $$ r_{x y} = frac{ sum_{i=1}^{n} left(x_{i}- overline{x} right) left(y_{i}- overline{y} right)}{ sqrt{ sum_{i=1}^{n} left(x_{i}- overline{x} right)^{2} sum_{i=1}^{n} left(y_{i}- overline{y} right)^{2}}} $$ https://rpsychologist.com/d3/correlation/ . Z - score . $$ z_{i}= frac{x_{i}- overline{x}}{s_{x}} $$ Pearson correlation coeficient as the average of the sum of the cross-products of z-scores . $$ r_{x y}= frac{1}{n-1} sum_{i=1}^{n} z_{x, i} cdot z_{y, i} $$ Normal equations for multiple linear regression . $$ y_{i} = beta_{1}+ beta_{2} x_{2 i}+ beta_{3} x_{3 i}+ cdots+ beta_{k} x_{k i}+ varepsilon_{i} quad(i=1, cdots, n) $$ Multiple Regression - matrix notation . $$ y=X beta+ varepsilon $$ if b is estimate of beta . $$ y=X b+e $$ residuals . $$ e=y-X b $$ sum of squares of the residuals . $$ begin{aligned} S(b) &amp;= sum e_{i}^{2}=e^{ prime} e=(y-X b)^{ prime}(y-X b) &amp;=y^{ prime} y-y^{ prime} X b-b^{ prime} X^{ prime} y+b^{ prime} X^{ prime} X b end{aligned} $$ the least squares estimator is obtained by minimizing S(b) . $$ frac{ partial S}{ partial b}=-2 X^{ prime} y+2 X^{ prime} X b $$ we set these derivatives equal to zero, which gives the normal equation . $$ X^{ prime} X b=X^{ prime} y $$ solving this for b we get normal equation . $$ b= left(X^{ prime} X right)^{-1} X^{ prime} y $$ Relationship between regression and correlation coeficient for univariate case . b for simple regression (univariate x) could be written as: . $$ b= frac{ sum left(x_{i}- overline{x} right) left(y_{i}- overline{y} right)}{ sum left(x_{i}- overline{x} right)^{2}} $$ $$ b= frac{s_{x y}}{s_{x}^{2}} $$ $$ b=r_{x y} frac{s_{y}}{s_{x}} $$ $$ frac{ sum left(x_{i}- bar{x} right) left(y_{i}- bar{y} right)}{ sum left(x_{i}- bar{x} right)^{2}}= frac{ sum_{i=1}^{n} left(x_{i}- bar{x} right) left(y_{i}- bar{y} right)}{ sqrt{ sum_{i=1}^{n} left(x_{i}- bar{x} right)^{2} sum_{i=1}^{n} left(y_{i}- bar{y} right)^{2}}} * frac{ sqrt{ frac{1}{n-1} sum_{i=1}^{n} left(y_{i}- bar{y} right)^{2}}}{ sqrt{ frac{1}{n-1} sum_{i=1}^{n} left(x_{i}- bar{x} right)^{2}}} $$ if they have the same variance (are scaled): . $$ sum left(x_{i}- overline{x} right)^{2} = sum left(y_{i}- overline{y} right)^{2} $$ then . $$ b=r_{x y} $$ 3.1 Check empirically that regression coef. == correlation coef. if x stdr. dev. == y std. dev . import pandas as pd import pandas.util.testing as tm tm.N, tm.K = 100, 2 import numpy as np from sklearn.linear_model import LinearRegression from sklearn.preprocessing import StandardScaler from sklearn.metrics import mean_squared_error from sklearn.metrics import r2_score np.random.seed(5) . &lt;ipython-input-1-eee0fee15d00&gt;:2: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. import pandas.util.testing as tm . df = tm.makeTimeDataFrame(freq=&#39;M&#39;) . df.corr() . A B C D . A 1.000000 | 0.042426 | 0.040210 | 0.093468 | . B 0.042426 | 1.000000 | 0.016829 | 0.255671 | . C 0.040210 | 0.016829 | 1.000000 | -0.363042 | . D 0.093468 | 0.255671 | -0.363042 | 1.000000 | . y_scaled = StandardScaler().fit_transform(df[[&#39;B&#39;]]) x_scaled = StandardScaler().fit_transform(df[[&#39;A&#39;]]) . lin_reg = LinearRegression().fit(x_scaled, y_scaled) . lin_reg.coef_ . array([[0.04242638]]) . 4. Relationship between regression coeficient and coeficient of determination . For simple regression (univariate x) could be written as: . $$ b= frac{ sum left(x_{i}- overline{x} right) left(y_{i}- overline{y} right)}{ sum left(x_{i}- overline{x} right)^{2}} $$ $$ y_{i}=a+b x_{i}+e_{i} $$ the difference from the mean (yi - y) can be decomposed as a sum of two components, a component corresponding to the difference . from the mean of the explanatory variable (xi - x) and an unexplained component described by the residual . $$ y_{i}- overline{y}=b left(x_{i}- overline{x} right)+e_{i} $$ IMPORTANT NOTE: SST = total sum of squares, SSE = explained sum of squares, SSR the sum of squared residuals, . but sometimes you can encouter that the meaning is switched and SSE is sum of squared errors and SSR as explained varience . $$ begin{array}{c}{ sum left(y_{i}- overline{y} right)^{2}=b^{2} sum left(x_{i}- overline{x} right)^{2}+ sum e_{i}^{2}} {S S T=S S E+S S R} end{array} $$ $$ R^{2}= frac{S S E}{S S T}= frac{b^{2} sum left(x_{i}- overline{x} right)^{2}}{ sum left(y_{i}- overline{y} right)^{2}} $$ Coeficient of determination is really just squated of correlation between x and y (holds true just for simple regression) . $$ R^{2}= frac{ left( sum left(x_{i}- overline{x} right) left(y_{i}- overline{y} right) right)^{2}}{ sum left(x_{i}- overline{x} right)^{2} sum left(y_{i}- overline{y} right)^{2}} $$ $$ r_{x y} = frac{ sum_{i=1}^{n} left(x_{i}- overline{x} right) left(y_{i}- overline{y} right)}{ sqrt{ sum_{i=1}^{n} left(x_{i}- overline{x} right)^{2} sum_{i=1}^{n} left(y_{i}- overline{y} right)^{2}}} $$ $$ r_{x y} = sqrt{ R^{2}} $$ $$ R^{2}=1- frac{ sum e_{i}^{2}}{ sum left(y_{i}- overline{y} right)^{2}} $$ $$ R^{2}=1- frac{S S R}{S S T} $$ 4.1 Check empirically that squared correlation coef. == coef. of determination . import pandas as pd import pandas.util.testing as tm import numpy as np tm.N, tm.K = 100, 2 import numpy as np from sklearn.linear_model import LinearRegression from sklearn.preprocessing import StandardScaler from sklearn.metrics import mean_squared_error from sklearn.metrics import r2_score import pandas_bokeh pandas_bokeh.output_notebook() np.random.seed(5) . Loading BokehJS ... df = tm.makeTimeDataFrame(freq=&#39;M&#39;) . df.corr() ** 2 . A B C D . A 1.000000 | 0.001800 | 0.001617 | 0.008736 | . B 0.001800 | 1.000000 | 0.000283 | 0.065368 | . C 0.001617 | 0.000283 | 1.000000 | 0.131799 | . D 0.008736 | 0.065368 | 0.131799 | 1.000000 | . x = df[[&#39;A&#39;]] y = df[&#39;B&#39;] . lin_reg = LinearRegression().fit(x, y) . r2_score(y,lin_reg.predict(x)) . 0.0017999979073189953 . r = (pd.DataFrame(data = np.linspace(-1, 1, 10), columns = [&#39;r&#39;]) .assign(r2 = lambda x: x[&#39;r&#39;]**2) .plot_bokeh(x = &#39;r&#39;, y = &#39;r2&#39;, title = &#39;Relationship between r and r2&#39;)) . 5. Relationship between coeficient of determination and mean squared error . Coeficient of determination is just mean squared error devided by it&#39;s standard deviation . $$ R^{2}(y, hat{y})=1- frac{ sum_{i=0}^{n_{ text { sanples }}-1} left(y_{i}- hat{y}_{i} right)^{2}}{ sum_{i=0}^{n_{ text { samples }}-1} left(y_{i}- overline{y} right)^{2}} $$ $$ operatorname{MSE}(y, hat{y})= frac{1}{n_{ text { samples }}} sum_{i=0}^{n_{ text { samples }}-1} left(y_{i}- hat{y}_{i} right)^{2} $$ 5.1 Check empirically that mean squared error == coef. of determination scaled by varience . lin_reg = LinearRegression().fit(x, y) . r2_score(y,lin_reg.predict(x)) . 0.07930073140334426 . 1-(mean_squared_error(y,lin_reg.predict(x)))/np.var(y) . 0.07930073140334415 .",
            "url": "https://pavelkrizek.github.io/ml-blog/2020/12/20/linear_model_and_stats.html",
            "relUrl": "/2020/12/20/linear_model_and_stats.html",
            "date": " • Dec 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pavelkrizek.github.io/ml-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pavelkrizek.github.io/ml-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pavelkrizek.github.io/ml-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pavelkrizek.github.io/ml-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}